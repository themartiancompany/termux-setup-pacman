#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0

#    ----------------------------------------------------------------------
#    Copyright © 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

# Global variables
_globals() {
  _path="$( \
    export \
      _OLDPWD="$(pwd)" && \
    cd \
      "$(dirname \
           "${BASH_SOURCE[0]}")" && \
    echo \
      "$(pwd)" && \
    cd \
      "${_OLDPWD}" && \
    unset \
      _OLDPWD)"
  unset \
    _OLDPWD
  app_name="$( \
    basename \
      "${BASH_SOURCE[0]}")"
  TERMUX_PREFIX="/data/data/com.termux/files"
  _arch="$( \
    uname \
      -m)"
  # TODO: Auto-fetch latest termux bootstrap
  # version until Life and DogeOS
  # continuous integration scripts
  # are ready
  _date="2025.02.02"
  _dpath="${HOME}/storage/downloads"
  _bs="bootstrap-${_arch}.zip"
  _shell="$( \
    ps \
      -hp \
      $$ | \
      awk \
        '{print $5}' || \
    ps \
      -p \
      $$ | \
      awk \
        '{print $9}' | \
        sed \
          '/NAME/d')"
}

_android_command_get() {
  local \
    _command="${1}" \
    _system_bin \
    _msg=()
  _system_bin="/system/bin"
  _command_path="${_system_bin}/${_command}"
  if [[ ! -e "${_command_path}" ]]; then
    _msg=(
      "Command '${_command_path}' does not exist."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  echo \
    "${_command_path}"
}

_check_cmd() {
  local \
    _command="${1}" \
    _package="${2}" \
    _command_path \
    _msg=()
  if [[ ! -e "${_command}" ]]; then
    _command_path="$( \
      command \
        -v \
        "${_command}")"
   if [[ "${_command_path}" != "" ]]; then
    _command="${_command_path}"
   elif [[ "${_command_path}" == "" ]]; then
     _msg=(
       "Missing command '${_command}'."
     )
     _msg_error \
       "${_msg[*]}" \
       1
   fi
  fi
}

_global_variables() {
  target_action=""
  bootstrap_dir=""
  quiet="y"
}

_requirements() {
  local \
    _os \
    _msg=()
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" == "Android" ]]; then
    _curl="$( \
      _android_command_get \
        "curl")"
    _check_cmd \
      "${_curl}"
    _mv="$( \
      _android_command_get \
        "mv")"
    _check_cmd \
      "${_mv}"
    _rm="$( \
      _android_command_get \
        "rm")"
    _check_cmd \
      "${_rm}"
    _sh="$( \
      _android_command_get \
        "sh")"
    _check_cmd \
      "${_rm}"
    _unzip="$( \
      _android_command_get \
        "unzip")"
    _check_cmd \
      "${_unzip}"
  elif [[ "${_os}" != "Android" ]]; then
    _msg=(
      "This program must be run on Android."
    )
    _msg_error \
      "${_msg[*]}"
  fi
}

# Error function
# Display a message and exits
# $1: message to display when the error occurs
_msg_error() {
  local \
    _msg="${1}" \
    _exit="${2}"
  echo \
    "[${app_name}] ERROR: ${_msg}"
  exit \
    "${_exit}"
}

_msg_info() {
  local \
    _msg="${1}"
  if [[ "${quiet}" == "n" ]]; then
    echo \
      "[${app_name}] [INFO]: ${_msg}"
  fi
}

# Download the bootstrap
_get() {
  local \
    _curl_opts=() \
    _github="https://github.com" \
    _ns='termux-pacman' \
    _pkg='termux-packages' \
    _url \
    _repo \
    _ddirpath \
    _msg=()
  _msg=(
    "Getting bootstrap."
  )
  _msg_info \
    "${_msg[*]}"
  _curl_opts=(
    -L
    -O
  )
  _repo="${_github}/${_ns}/${_pkg}"
  _ddirpath="${_repo}/releases/download"
  _url="${_ddirpath}/bootstrap-${_date}-r1%2Bpacman-android-7/${_bs}"
  if [ ! -d "${HOME}/storage" ]; then
    _msg=(
      "Getting storage permission."
    )
    _msg_info \
      "${_msg[*]}"
    termux-setup-storage
    # Timer to give users the time to authorize the Termux app
    # to obtain storage permission.
    sleep \
      10
    # TODO: directly get the permission if root is available
  fi
  cd \
    "${_dpath}"
  _msg=(
    "Downloading bootstrap"
    "archive in '${_dpath}/${_bs}'."
  )
  _msg_info \
    "${_msg[*]}"
  "${_curl}" \
    "${_curl_opts[@]}" \
    "${_url}"
  [[ ! "$?" -eq 0 ]] && \
    _msg=(
      'Check ur internet connection is' \
      'correctly working.'

    )
    _msg_info \
      "${_msg[*]}"
  cd \
    "${OLDPWD}"
}

_integrity_check() {
  local \
    _zip="${1}" \
    _check_bad
  if [[ ! -e "${_zip}" ]]; then
    _bs_bad="true"
  elif [[ -e "${_zip}" ]]; then
    _check_bad="$( \
      "${_unzip}" \
        -t \
        "${_zip}" \
        2>&1)"
    _msg_bad_start="unzip: couldn't open"
    _msg_bad_end=": Invalid file"
    if [[ "${_check_bad}" == \
          "${_msg_bad_start}"*"${_msg_bad_end}" ]]; then
      _bs_bad="true"
    else
      _bs_bad="false"
    fi
  fi
}

# Unpacks the bootstrap, setup symlinks
_prepare() {
  local \
    _bs_bad \
    _msg=()
  _msg=(
    "Preparing resources"
    "for installation."
  )
  _msg_info \
    "${_msg[*]}"
  _bs_bad="true"
  while true; do
    _integrity_check \
      "${_dpath}/${_bs}"
    if [[ "${_bs_bad}" == "true" ]]; then
      _get
    elif [[ "${_bs_bad}" == "false" ]]; then
      _msg=(
        "Bootstrap archive correctly downloaded"
        "in '${_dpath}/${_bs}'."
      )
      _msg_info \
        "${_msg[*]}"
      break
    fi
  done
  if [[ -e "${TERMUX_PREFIX}/pacman_lock" ]]; then
    _msg=(
      "Run ${app_name} from a fail-safe session."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif [[ ! -e "${TERMUX_PREFIX}/pacman_lock" ]]; then
    mkdir \
      -p \
      "${TERMUX_PREFIX}/pacman"
    cd  \
      "${TERMUX_PREFIX}/pacman"
    "${_unzip}" \
      "${_dpath}/${_bs}"
    cat \
      SYMLINKS.txt | \
      awk \
        -F "←" \
        '{system("ln -s '"'"'"$1"'"'"' '"'"'"$2"'"'"'")}'
    touch \
      "${TERMUX_PREFIX}/pacman_lock"
  fi
  cd \
    "${OLDPWD}"
}

# Replace usr, to be run from failsafe session
_install() {
  local \
    _move_apt=() \
    _move_pacman=() \
    _move=() \
    _sh \
    _rm \
    _prepare_attempts_max \
    _prepare_attempt \
    _msg=()
  _msg=(
    "Bootstrapping"
    "pre - Life / DogeOS Android"
    "environment."
  )
  _msg_info \
    "${_msg[*]}"
  _sh="/system/bin/sh"
  _move_apt=(
    "${_mv}"
      "${TERMUX_PREFIX}/usr"
      "${TERMUX_PREFIX}/apt"
  )
  _move_pacman=(
    "${_mv}"
      "${TERMUX_PREFIX}/pacman"
      "${TERMUX_PREFIX}/usr"
  )
  _move=(
    "${_move_apt[@]}"
    '&&'
    "${_move_pacman[@]}"
  )
  _prepare_attempts_max="300"
  _prepare_attempt="0"
  while \
    [[ ! -e "${TERMUX_PREFIX}/pacman_lock" ]] && \
    (( "${_prepare_attempt}" < "${_prepare_attempts_max}" )); do
    _prepare_attempt="$(( \
      _prepare_attempt + "1"))"
    echo \
      "Pre - Life / DogeOS environment setup ready" \
      "trigger found not found, running" \
      "prepare procedure."
    _prepare
  done
  # [[ "${_shell}" != "sh" ]] && \
  #   echo \
  #     'be sure to be running this from a fail-safe session' && \
  #   exit
  "${_sh}" \
    -c \
    "${_move[*]}"
}

_clean() {
  echo \
    "Uninstalling Debian-based" \
    "Termux environment."
  rm \
    -rf \
    "${TERMUX_PREFIX}/apt" \
    "${TERMUX_PREFIX}/pacman_lock"
}

_setup() {
  echo \
    "Setting up base" \
    "pre - Life / DogeOS software" \
    "catalogues."
  pacman-key \
    --init
  pacman-key \
    --populate
  pacman \
    -Sy
}

_termux_setup_pacman() {
  local \
    _action="${1}" \
    _os \
    _msg=()
  _os="$( \
    uname \
      -o)"
  if [[ "${_os}" != "Android" ]]; then
    _msg=(
      "This script is supposed to"
      "be run from Android."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
  "_${_action}"
}

_bootstrap_dir_auto_detect() {
  local \
    _bootstrap_dir
  _bootstrap_dir="${HOME}/.cache/${app_name}"
  if [[ "${bootstrap_dir}" == "" ]]; then
    bootstrap_dir="${_bootstrap_dir}"
    if [[ ! -d "${_bootstrap_dir}" ]]; then
      mkdir \
        -p \
	"${_bootstrap_dir}"
      chmod \
        700 \
	"${_bootstrap_dir}"
    fi
  fi
}

_set_overrides() {
  local \
    _msg=()
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  _bootstrap_dir_auto_detect
}

# auto procedure
_auto() {
  echo \
    "Auto-install selected."
  _prepare
  _install
  _clean
  _setup
}

_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Fallback User Repository.

Usage:

  ${app_name}
    [options]
    [packages]

  options:
     -p <package_manager>   Package manager.
                            Default: ${package_manager}
     -d                     Download only (noinstall).
                            Default: ${download_only}
     -w <repo_dir>          Directory containing the fur tree.
                            To be set when download only is true,
                            otherwise is temporary.
                            Default: ${repo_dir}
     -K <sig_dir>           Signatures keys directory.
                            Default: ${sig_dir}
     -P <platform>          Platform for which to retrieve packages,
                            can be 'arch' or 'termux'.
                            Default: ${target_platform}
     -A <architecture>      Architecture for which to retrieve packages,
                            can be 'any', 'arm' or 'x86_64'.
                            Default: ${target_arch}
     -m <mirror>            Fur mirror, can be 'github' or
                            'gitlab'.
                            Default: ${target_mirror}
     -o <output_dir>        Output directory.
                            Default: ${output_dir}

     -c                     Colors.
     -h                     This message.
     -v                     Enable verbose output
ENDUSAGETEXT
  printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "            Target action:   ${target_action}"
  _msg_info "      Bootstrap directory:   ${bootstrap_dir}"
}

_globals
_global_variables
while \
  getopts \
    'd:vh?' \
    arg; do
  case \
    "${arg}" in
    d) bootstrap_dir="${OPTARG}" ;;
    v) quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'." \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  "$(( \
    OPTIND - 1 \
  ))"
target_action="${1}"
if (( "$#" < 1 )); then
  target_action="auto"
  _msg_info \
    "Using shell '${_shell}'."
fi
_set_overrides
_show_config
app_opts=(
  "${target_action}"
)
_termux_setup_pacman
  "${app_opts[@]}"
